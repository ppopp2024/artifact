extern __shared__ float shared[];
extern "C" __global__ void __launch_bounds__(1024) VkFFT_main_logN18_1 (float2* inputs, float2* outputs) {
unsigned int sharedStride = 16;
float2* sdata = (float2*)shared;

	float2 temp_0;
	temp_0.x=0;
	temp_0.y=0;
	float2 temp_1;
	temp_1.x=0;
	temp_1.y=0;
	float2 temp_2;
	temp_2.x=0;
	temp_2.y=0;
	float2 temp_3;
	temp_3.x=0;
	temp_3.y=0;
	float2 temp_4;
	temp_4.x=0;
	temp_4.y=0;
	float2 temp_5;
	temp_5.x=0;
	temp_5.y=0;
	float2 temp_6;
	temp_6.x=0;
	temp_6.y=0;
	float2 temp_7;
	temp_7.x=0;
	temp_7.y=0;
	float2 w;
	w.x=0;
	w.y=0;
	float2 loc_0;
	loc_0.x=0;
	loc_0.y=0;
	float2 iw;
	iw.x=0;
	iw.y=0;
	unsigned int stageInvocationID=0;
	unsigned int blockInvocationID=0;
	unsigned int sdataID=0;
	unsigned int combinedID=0;
	unsigned int inoutID=0;
	unsigned int disableThreads=1;
	float angle=0;
	float2 mult;
	mult.x = 0;
	mult.y = 0;
		disableThreads = ((((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144) < 262144) ? 1 : 0;
		if(disableThreads>0) {
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 0) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_0=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 64) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_1=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 128) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_2=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 192) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_3=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 256) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_4=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 320) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_5=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 384) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
			temp_6=inputs[inoutID];
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 448) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID);
		if(threadIdx.y < 64){
			temp_7=inputs[inoutID];
		}
	}
		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (1);
		angle = stageInvocationID * -3.14159265358979312e+00f;
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_6.x * iw.x - temp_6.y * iw.y;
	loc_0.y = temp_6.y * iw.x + temp_6.x * iw.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	loc_0.x = temp_7.x * iw.x - temp_7.y * iw.y;
	loc_0.y = temp_7.y * iw.x + temp_7.x * iw.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_1.x * w.x - temp_1.y * w.y;
	loc_0.y = temp_1.y * w.x + temp_1.x * w.y;
	temp_1.x = temp_0.x - loc_0.x;
	temp_1.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_3.x * iw.x - temp_3.y * iw.y;
	loc_0.y = temp_3.y * iw.x + temp_3.x * iw.y;
	temp_3.x = temp_2.x - loc_0.x;
	temp_3.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	iw.x = w.x * 7.07106781186547573e-01f + w.y * 7.07106781186547573e-01f;
	iw.y = w.y * 7.07106781186547573e-01f - w.x * 7.07106781186547573e-01f;

	loc_0.x = temp_5.x * iw.x - temp_5.y * iw.y;
	loc_0.y = temp_5.y * iw.x + temp_5.x * iw.y;
	temp_5.x = temp_4.x - loc_0.x;
	temp_5.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	w.x = iw.y;
	w.y = -iw.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_6.x - loc_0.x;
	temp_7.y = temp_6.y - loc_0.y;
	temp_6.x = temp_6.x + loc_0.x;
	temp_6.y = temp_6.y + loc_0.y;
}		sharedStride = 16;
	__syncthreads();

		if(disableThreads>0) {
	stageInvocationID = threadIdx.y + 0;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 1;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 8;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_0;
	sdataID = inoutID + 1;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_4;
	sdataID = inoutID + 2;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_2;
	sdataID = inoutID + 3;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_6;
	sdataID = inoutID + 4;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_1;
	sdataID = inoutID + 5;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_5;
	sdataID = inoutID + 6;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_3;
	sdataID = inoutID + 7;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_7;
}	__syncthreads();

		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (8);
		angle = stageInvocationID * -3.92699081698724139e-01f;
		temp_0 = sdata[sharedStride*(threadIdx.y+0)+threadIdx.x];
		temp_4 = sdata[sharedStride*(threadIdx.y+64)+threadIdx.x];
		temp_2 = sdata[sharedStride*(threadIdx.y+128)+threadIdx.x];
		temp_6 = sdata[sharedStride*(threadIdx.y+192)+threadIdx.x];
		temp_1 = sdata[sharedStride*(threadIdx.y+256)+threadIdx.x];
		temp_5 = sdata[sharedStride*(threadIdx.y+320)+threadIdx.x];
		temp_3 = sdata[sharedStride*(threadIdx.y+384)+threadIdx.x];
		temp_7 = sdata[sharedStride*(threadIdx.y+448)+threadIdx.x];
	w.x = __cosf(angle);
	w.y = __sinf(angle);
	loc_0.x = temp_1.x * w.x - temp_1.y * w.y;
	loc_0.y = temp_1.y * w.x + temp_1.x * w.y;
	temp_1.x = temp_0.x - loc_0.x;
	temp_1.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_4.x - loc_0.x;
	temp_5.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_2.x - loc_0.x;
	temp_3.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_6.x - loc_0.x;
	temp_7.y = temp_6.y - loc_0.y;
	temp_6.x = temp_6.x + loc_0.x;
	temp_6.y = temp_6.y + loc_0.y;
	w.x = __cosf(0.5f*angle);
	w.y = __sinf(0.5f*angle);
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_3.x * iw.x - temp_3.y * iw.y;
	loc_0.y = temp_3.y * iw.x + temp_3.x * iw.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_7.x * iw.x - temp_7.y * iw.y;
	loc_0.y = temp_7.y * iw.x + temp_7.x * iw.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
	w.x = __cosf(0.25f*angle);
	w.y = __sinf(0.25f*angle);
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_6.x * iw.x - temp_6.y * iw.y;
	loc_0.y = temp_6.y * iw.x + temp_6.x * iw.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	iw.x = w.x * 7.07106781186547573e-01f + w.y * 7.07106781186547573e-01f;
	iw.y = w.y * 7.07106781186547573e-01f - w.x * 7.07106781186547573e-01f;

	loc_0.x = temp_5.x * iw.x - temp_5.y * iw.y;
	loc_0.y = temp_5.y * iw.x + temp_5.x * iw.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	w.x = iw.y;
	w.y = -iw.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
}	__syncthreads();

		if(disableThreads>0) {
	stageInvocationID = threadIdx.y + 0;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 8;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 8;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_0;
	sdataID = inoutID + 8;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_1;
	sdataID = inoutID + 16;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_2;
	sdataID = inoutID + 24;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_3;
	sdataID = inoutID + 32;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_4;
	sdataID = inoutID + 40;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_5;
	sdataID = inoutID + 48;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_6;
	sdataID = inoutID + 56;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_7;
}	__syncthreads();

		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (64);
		angle = stageInvocationID * -4.90873852123405174e-02f;
		temp_0 = sdata[sharedStride*(threadIdx.y+0)+threadIdx.x];
		temp_1 = sdata[sharedStride*(threadIdx.y+64)+threadIdx.x];
		temp_2 = sdata[sharedStride*(threadIdx.y+128)+threadIdx.x];
		temp_3 = sdata[sharedStride*(threadIdx.y+192)+threadIdx.x];
		temp_4 = sdata[sharedStride*(threadIdx.y+256)+threadIdx.x];
		temp_5 = sdata[sharedStride*(threadIdx.y+320)+threadIdx.x];
		temp_6 = sdata[sharedStride*(threadIdx.y+384)+threadIdx.x];
		temp_7 = sdata[sharedStride*(threadIdx.y+448)+threadIdx.x];
	w.x = __cosf(angle);
	w.y = __sinf(angle);
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
	w.x = __cosf(0.5f*angle);
	w.y = __sinf(0.5f*angle);
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_6.x * iw.x - temp_6.y * iw.y;
	loc_0.y = temp_6.y * iw.x + temp_6.x * iw.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	loc_0.x = temp_7.x * iw.x - temp_7.y * iw.y;
	loc_0.y = temp_7.y * iw.x + temp_7.x * iw.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
	w.x = __cosf(0.25f*angle);
	w.y = __sinf(0.25f*angle);
	loc_0.x = temp_1.x * w.x - temp_1.y * w.y;
	loc_0.y = temp_1.y * w.x + temp_1.x * w.y;
	temp_1.x = temp_0.x - loc_0.x;
	temp_1.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_3.x * iw.x - temp_3.y * iw.y;
	loc_0.y = temp_3.y * iw.x + temp_3.x * iw.y;
	temp_3.x = temp_2.x - loc_0.x;
	temp_3.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	iw.x = w.x * 7.07106781186547573e-01f + w.y * 7.07106781186547573e-01f;
	iw.y = w.y * 7.07106781186547573e-01f - w.x * 7.07106781186547573e-01f;

	loc_0.x = temp_5.x * iw.x - temp_5.y * iw.y;
	loc_0.y = temp_5.y * iw.x + temp_5.x * iw.y;
	temp_5.x = temp_4.x - loc_0.x;
	temp_5.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	w.x = iw.y;
	w.y = -iw.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_6.x - loc_0.x;
	temp_7.y = temp_6.y - loc_0.y;
	temp_6.x = temp_6.x + loc_0.x;
	temp_6.y = temp_6.y + loc_0.y;
}		sharedStride = 16;
		if(disableThreads>0) {
}		if(disableThreads>0) {
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 0)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_0.x * mult.x - temp_0.y * mult.y;
		temp_0.y = temp_0.y * mult.x + temp_0.x * mult.y;
		temp_0.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 64)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_4.x * mult.x - temp_4.y * mult.y;
		temp_4.y = temp_4.y * mult.x + temp_4.x * mult.y;
		temp_4.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 128)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_2.x * mult.x - temp_2.y * mult.y;
		temp_2.y = temp_2.y * mult.x + temp_2.x * mult.y;
		temp_2.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 192)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_6.x * mult.x - temp_6.y * mult.y;
		temp_6.y = temp_6.y * mult.x + temp_6.x * mult.y;
		temp_6.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 256)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_1.x * mult.x - temp_1.y * mult.y;
		temp_1.y = temp_1.y * mult.x + temp_1.x * mult.y;
		temp_1.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 320)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_5.x * mult.x - temp_5.y * mult.y;
		temp_5.y = temp_5.y * mult.x + temp_5.x * mult.y;
		temp_5.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 384)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_3.x * mult.x - temp_3.y * mult.y;
		temp_3.y = temp_3.y * mult.x + temp_3.x * mult.y;
		temp_3.x = w.x;
		angle = 2 * 3.14159265358979312e+00f * (((((threadIdx.x + blockIdx.x * blockDim.x)) % (512)) * (threadIdx.y + 448)) / 2.62144000000000000e+05f);
		mult.x = __cosf(angle);
		mult.y = -__sinf(angle);
		w.x = temp_7.x * mult.x - temp_7.y * mult.y;
		temp_7.y = temp_7.y * mult.x + temp_7.x * mult.y;
		temp_7.x = w.x;
}		if ((((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144) < 262144) {
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 0) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_0;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 64) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_4;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 128) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_2;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 192) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_6;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 256) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_1;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 320) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_5;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 384) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
			outputs[inoutID] = temp_3;
		inoutID = ((threadIdx.x + blockIdx.x * blockDim.x)) % (512) + 512 * (threadIdx.y + 448) + (((threadIdx.x + blockIdx.x * blockDim.x)) / 512) * (262144);
			inoutID = (inoutID) * 1;
		if(threadIdx.y < 64){
			outputs[inoutID] = temp_7;
		}
	}
}



