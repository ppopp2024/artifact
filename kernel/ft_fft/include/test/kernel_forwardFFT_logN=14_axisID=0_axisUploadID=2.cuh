extern __shared__ float shared[];
extern "C" __global__ void __launch_bounds__(512) VkFFT_main_logN14_2 (float2* inputs, float2* outputs) {
unsigned int sharedStride = 17;
float2* sdata = (float2*)shared;

	float2 temp_0;
	temp_0.x=0;
	temp_0.y=0;
	float2 temp_1;
	temp_1.x=0;
	temp_1.y=0;
	float2 temp_2;
	temp_2.x=0;
	temp_2.y=0;
	float2 temp_3;
	temp_3.x=0;
	temp_3.y=0;
	float2 temp_4;
	temp_4.x=0;
	temp_4.y=0;
	float2 temp_5;
	temp_5.x=0;
	temp_5.y=0;
	float2 temp_6;
	temp_6.x=0;
	temp_6.y=0;
	float2 temp_7;
	temp_7.x=0;
	temp_7.y=0;
	float2 w;
	w.x=0;
	w.y=0;
	float2 loc_0;
	loc_0.x=0;
	loc_0.y=0;
	float2 iw;
	iw.x=0;
	iw.y=0;
	unsigned int stageInvocationID=0;
	unsigned int blockInvocationID=0;
	unsigned int sdataID=0;
	unsigned int combinedID=0;
	unsigned int inoutID=0;
	unsigned int disableThreads=1;
	float angle=0;
		unsigned int numActiveThreads = ((blockIdx.x/1)==4) ? 0 : 512;
		disableThreads = (threadIdx.x * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096) < 16384) ? 1 : 0;
		if((threadIdx.x+16*threadIdx.y)< numActiveThreads) {
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 0*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 1*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 2*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 3*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 4*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 5*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 6*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 7*numActiveThreads;
		inoutID = (combinedID % 256) + (combinedID / 256) * 256 + (((blockIdx.x) % 1) * 256 + ((blockIdx.x) / 1) * 4096);
			inoutID = (inoutID);
		sdata[(combinedID / 256) + sharedStride*(combinedID % 256)] = inputs[inoutID];
	}
	__syncthreads();

		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (1);
		angle = stageInvocationID * -3.14159265358979312e+00f;
		temp_0 = sdata[sharedStride*(threadIdx.y+0)+threadIdx.x];
		temp_1 = sdata[sharedStride*(threadIdx.y+32)+threadIdx.x];
		temp_2 = sdata[sharedStride*(threadIdx.y+64)+threadIdx.x];
		temp_3 = sdata[sharedStride*(threadIdx.y+96)+threadIdx.x];
		temp_4 = sdata[sharedStride*(threadIdx.y+128)+threadIdx.x];
		temp_5 = sdata[sharedStride*(threadIdx.y+160)+threadIdx.x];
		temp_6 = sdata[sharedStride*(threadIdx.y+192)+threadIdx.x];
		temp_7 = sdata[sharedStride*(threadIdx.y+224)+threadIdx.x];
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_6.x * iw.x - temp_6.y * iw.y;
	loc_0.y = temp_6.y * iw.x + temp_6.x * iw.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	loc_0.x = temp_7.x * iw.x - temp_7.y * iw.y;
	loc_0.y = temp_7.y * iw.x + temp_7.x * iw.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
	w.x = 1;
	w.y = 0;
	loc_0.x = temp_1.x * w.x - temp_1.y * w.y;
	loc_0.y = temp_1.y * w.x + temp_1.x * w.y;
	temp_1.x = temp_0.x - loc_0.x;
	temp_1.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_3.x * iw.x - temp_3.y * iw.y;
	loc_0.y = temp_3.y * iw.x + temp_3.x * iw.y;
	temp_3.x = temp_2.x - loc_0.x;
	temp_3.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	iw.x = w.x * 7.07106781186547573e-01f + w.y * 7.07106781186547573e-01f;
	iw.y = w.y * 7.07106781186547573e-01f - w.x * 7.07106781186547573e-01f;

	loc_0.x = temp_5.x * iw.x - temp_5.y * iw.y;
	loc_0.y = temp_5.y * iw.x + temp_5.x * iw.y;
	temp_5.x = temp_4.x - loc_0.x;
	temp_5.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	w.x = iw.y;
	w.y = -iw.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_6.x - loc_0.x;
	temp_7.y = temp_6.y - loc_0.y;
	temp_6.x = temp_6.x + loc_0.x;
	temp_6.y = temp_6.y + loc_0.y;
}		sharedStride = 16;
	__syncthreads();

		if(disableThreads>0) {
	stageInvocationID = threadIdx.y + 0;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 1;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 8;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_0;
	sdataID = inoutID + 1;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_4;
	sdataID = inoutID + 2;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_2;
	sdataID = inoutID + 3;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_6;
	sdataID = inoutID + 4;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_1;
	sdataID = inoutID + 5;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_5;
	sdataID = inoutID + 6;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_3;
	sdataID = inoutID + 7;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_7;
}	__syncthreads();

		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (8);
		angle = stageInvocationID * -3.92699081698724139e-01f;
		temp_0 = sdata[sharedStride*(threadIdx.y+0)+threadIdx.x];
		temp_4 = sdata[sharedStride*(threadIdx.y+32)+threadIdx.x];
		temp_2 = sdata[sharedStride*(threadIdx.y+64)+threadIdx.x];
		temp_6 = sdata[sharedStride*(threadIdx.y+96)+threadIdx.x];
		temp_1 = sdata[sharedStride*(threadIdx.y+128)+threadIdx.x];
		temp_5 = sdata[sharedStride*(threadIdx.y+160)+threadIdx.x];
		temp_3 = sdata[sharedStride*(threadIdx.y+192)+threadIdx.x];
		temp_7 = sdata[sharedStride*(threadIdx.y+224)+threadIdx.x];
	w.x = __cosf(angle);
	w.y = __sinf(angle);
	loc_0.x = temp_1.x * w.x - temp_1.y * w.y;
	loc_0.y = temp_1.y * w.x + temp_1.x * w.y;
	temp_1.x = temp_0.x - loc_0.x;
	temp_1.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_4.x - loc_0.x;
	temp_5.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_2.x - loc_0.x;
	temp_3.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_6.x - loc_0.x;
	temp_7.y = temp_6.y - loc_0.y;
	temp_6.x = temp_6.x + loc_0.x;
	temp_6.y = temp_6.y + loc_0.y;
	w.x = __cosf(0.5f*angle);
	w.y = __sinf(0.5f*angle);
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_3.x * iw.x - temp_3.y * iw.y;
	loc_0.y = temp_3.y * iw.x + temp_3.x * iw.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_7.x * iw.x - temp_7.y * iw.y;
	loc_0.y = temp_7.y * iw.x + temp_7.x * iw.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
	w.x = __cosf(0.25f*angle);
	w.y = __sinf(0.25f*angle);
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	iw.x = w.y;
	iw.y = -w.x;
	loc_0.x = temp_6.x * iw.x - temp_6.y * iw.y;
	loc_0.y = temp_6.y * iw.x + temp_6.x * iw.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	iw.x = w.x * 7.07106781186547573e-01f + w.y * 7.07106781186547573e-01f;
	iw.y = w.y * 7.07106781186547573e-01f - w.x * 7.07106781186547573e-01f;

	loc_0.x = temp_5.x * iw.x - temp_5.y * iw.y;
	loc_0.y = temp_5.y * iw.x + temp_5.x * iw.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	w.x = iw.y;
	w.y = -iw.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
}	__syncthreads();

		if(disableThreads>0) {
	stageInvocationID = threadIdx.y + 0;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 8;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 8;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_0;
	sdataID = inoutID + 8;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_1;
	sdataID = inoutID + 16;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_2;
	sdataID = inoutID + 24;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_3;
	sdataID = inoutID + 32;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_4;
	sdataID = inoutID + 40;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_5;
	sdataID = inoutID + 48;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_6;
	sdataID = inoutID + 56;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_7;
}	__syncthreads();

		if(disableThreads>0) {
		stageInvocationID = (threadIdx.y+ 0) % (64);
		angle = stageInvocationID * -4.90873852123405174e-02f;
		temp_0 = sdata[sharedStride*(threadIdx.y+0)+threadIdx.x];
		temp_2 = sdata[sharedStride*(threadIdx.y+64)+threadIdx.x];
		temp_4 = sdata[sharedStride*(threadIdx.y+128)+threadIdx.x];
		temp_6 = sdata[sharedStride*(threadIdx.y+192)+threadIdx.x];
	w.x = __cosf(angle);
	w.y = __sinf(angle);
	loc_0.x = temp_4.x * w.x - temp_4.y * w.y;
	loc_0.y = temp_4.y * w.x + temp_4.x * w.y;
	temp_4.x = temp_0.x - loc_0.x;
	temp_4.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_2.x - loc_0.x;
	temp_6.y = temp_2.y - loc_0.y;
	temp_2.x = temp_2.x + loc_0.x;
	temp_2.y = temp_2.y + loc_0.y;
	w.x = __cosf(0.5f*angle);
	w.y = __sinf(0.5f*angle);
	loc_0.x = temp_2.x * w.x - temp_2.y * w.y;
	loc_0.y = temp_2.y * w.x + temp_2.x * w.y;
	temp_2.x = temp_0.x - loc_0.x;
	temp_2.y = temp_0.y - loc_0.y;
	temp_0.x = temp_0.x + loc_0.x;
	temp_0.y = temp_0.y + loc_0.y;
	loc_0.x = w.x;	w.x = w.y;
	w.y = -loc_0.x;
	loc_0.x = temp_6.x * w.x - temp_6.y * w.y;
	loc_0.y = temp_6.y * w.x + temp_6.x * w.y;
	temp_6.x = temp_4.x - loc_0.x;
	temp_6.y = temp_4.y - loc_0.y;
	temp_4.x = temp_4.x + loc_0.x;
	temp_4.y = temp_4.y + loc_0.y;
		stageInvocationID = (threadIdx.y+ 32) % (64);
		angle = stageInvocationID * -4.90873852123405174e-02f;
		temp_1 = sdata[sharedStride*(threadIdx.y+32)+threadIdx.x];
		temp_3 = sdata[sharedStride*(threadIdx.y+96)+threadIdx.x];
		temp_5 = sdata[sharedStride*(threadIdx.y+160)+threadIdx.x];
		temp_7 = sdata[sharedStride*(threadIdx.y+224)+threadIdx.x];
	w.x = __cosf(angle);
	w.y = __sinf(angle);
	loc_0.x = temp_5.x * w.x - temp_5.y * w.y;
	loc_0.y = temp_5.y * w.x + temp_5.x * w.y;
	temp_5.x = temp_1.x - loc_0.x;
	temp_5.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_3.x - loc_0.x;
	temp_7.y = temp_3.y - loc_0.y;
	temp_3.x = temp_3.x + loc_0.x;
	temp_3.y = temp_3.y + loc_0.y;
	w.x = __cosf(0.5f*angle);
	w.y = __sinf(0.5f*angle);
	loc_0.x = temp_3.x * w.x - temp_3.y * w.y;
	loc_0.y = temp_3.y * w.x + temp_3.x * w.y;
	temp_3.x = temp_1.x - loc_0.x;
	temp_3.y = temp_1.y - loc_0.y;
	temp_1.x = temp_1.x + loc_0.x;
	temp_1.y = temp_1.y + loc_0.y;
	loc_0.x = w.x;	w.x = w.y;
	w.y = -loc_0.x;
	loc_0.x = temp_7.x * w.x - temp_7.y * w.y;
	loc_0.y = temp_7.y * w.x + temp_7.x * w.y;
	temp_7.x = temp_5.x - loc_0.x;
	temp_7.y = temp_5.y - loc_0.y;
	temp_5.x = temp_5.x + loc_0.x;
	temp_5.y = temp_5.y + loc_0.y;
}	__syncthreads();

		sharedStride = 17;
		if(disableThreads>0) {
	stageInvocationID = threadIdx.y + 0;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 64;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 4;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_0;
	sdataID = inoutID + 64;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_4;
	sdataID = inoutID + 128;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_2;
	sdataID = inoutID + 192;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_6;
	stageInvocationID = threadIdx.y + 32;
	blockInvocationID = stageInvocationID;
	stageInvocationID = stageInvocationID % 64;
	blockInvocationID = blockInvocationID - stageInvocationID;
	inoutID = blockInvocationID * 4;
	inoutID = inoutID + stageInvocationID;
	sdataID = inoutID + 0;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_1;
	sdataID = inoutID + 64;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_5;
	sdataID = inoutID + 128;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_3;
	sdataID = inoutID + 192;
	sdataID = sharedStride * sdataID;
	sdataID = sdataID + threadIdx.x;
	sdata[sdataID] = temp_7;
}	__syncthreads();

		if (((threadIdx.x + 16 * threadIdx.y) % 16 + ((blockIdx.x) / 1)*16 < 64)){
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 0;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 512;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 1024;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 1536;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 2048;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 2560;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 3072;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
		combinedID = (threadIdx.x + 16 * threadIdx.y) + 3584;
		inoutID = combinedID % 16 + ((blockIdx.x) / 1)*16 + ((combinedID/16) * 64)+ ((blockIdx.x) % 1) * 64;
			inoutID = (inoutID) * 1;
			outputs[inoutID] = sdata[(combinedID % blockDim.x)+(combinedID/blockDim.x)*sharedStride];
	}
}



